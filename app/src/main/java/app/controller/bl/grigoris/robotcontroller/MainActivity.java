package app.controller.bl.grigoris.robotcontroller;import android.bluetooth.BluetoothAdapter;import android.bluetooth.BluetoothDevice;import android.bluetooth.BluetoothSocket;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.graphics.Color;import android.preference.PreferenceManager;import android.support.v7.app.ActionBarActivity;import android.os.Bundle;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.Button;import android.widget.TextView;import android.widget.Toast;import com.zerokol.views.JoystickView;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.Set;import java.util.UUID;public class MainActivity extends ActionBarActivity  {    boolean connected = false;    JoystickView joystick;    BluetoothAdapter mBluetoothAdapter;    BluetoothSocket mmSocket;    BluetoothDevice mmDevice;    OutputStream mmOutputStream;    InputStream mmInputStream;    Thread workerThread;    byte[] readBuffer;    int readBufferPosition;    int counter;    volatile boolean stopWorker;    Toast toast;    Button connect;    Button disconnect;    TextView status;    String deviceName;    Context context;    TextView deviceNameText;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        context = getApplicationContext();        joystick = (JoystickView) findViewById(R.id.joystickView);        connect = (Button) findViewById(R.id.connectBtn);        disconnect = (Button) findViewById(R.id.disconnectBtn);        status = (TextView) findViewById(R.id.statusText);        deviceNameText = (TextView) findViewById(R.id.deviceNameText);        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(this);        deviceName = preferences.getString("deviceName","");        mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();        joystick.setOnJoystickMoveListener(new JoystickView.OnJoystickMoveListener() {           @Override           public void onValueChanged(int angle, int power, int direction) {            switch (direction) {                case JoystickView.FRONT:                    try {                        sendData("F");                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                    break;                case JoystickView.FRONT_RIGHT:                    try {                          sendData("F");                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                    break;                case JoystickView.RIGHT:                    try {                        sendData("L");                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                    break;                case JoystickView.RIGHT_BOTTOM:                    try {                        sendData("B");                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                    break;                case JoystickView.BOTTOM:                    try {                        sendData("B");                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                    break;                case JoystickView.BOTTOM_LEFT:                    try {                        sendData("B");                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                    break;                case JoystickView.LEFT:                    try {                        sendData("R");                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                    break;                case JoystickView.LEFT_FRONT:                    try {                        sendData("F");                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                    break;                default:                    try {                        sendData("S");                    } catch (InterruptedException e) {                        e.printStackTrace();                    }            }        }        }, JoystickView.DEFAULT_LOOP_INTERVAL);        if (mBluetoothAdapter == null) {            showToast("No bluetooth adapter available");        }        if (!mBluetoothAdapter.isEnabled()) {            Intent enableBluetooth = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);            startActivityForResult(enableBluetooth, 0);        }        deviceNameText.setText("Device Name: " + deviceName );                connect.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        //Connect                        try {                            connect();                        } catch (IOException e) {                        }                    }                });        disconnect.setOnClickListener(new View.OnClickListener() {@Override                                                                  public void onClick(View v) {            //Disconnect            try {                disconnect();            } catch (IOException e) {            }        }        });    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        // Inflate the menu; this adds items to the action bar if it is present.        getMenuInflater().inflate(R.menu.menu_main, menu);        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        // Handle action bar item clicks here. The action bar will        // automatically handle clicks on the Home/Up button, so long        // as you specify a parent activity in AndroidManifest.xml.        int id = item.getItemId();        //noinspection SimplifiableIfStatement        if (id == R.id.action_settings) {            Intent settings = new Intent(this, SettingsActivity.class);            startActivity(settings);            return true;        }        return super.onOptionsItemSelected(item);    }    void sendData(String msg) throws InterruptedException {        if (connected) {            msg += "\n";            try {                mmOutputStream.write(msg.getBytes());            } catch (IOException e) {                showToast("Cannot write to OutputStream");            }        } else {            Thread.sleep(100);            showToast("Not connected!");        }    }    void showToast(String text) {        if (toast != null) {            toast.cancel();        }        toast = Toast.makeText(context, text, Toast.LENGTH_SHORT);        toast.show();    }    public void disconnect() throws IOException {        if(connected)        stopWorker = true;        mmOutputStream.close();        mmInputStream.close();        mmSocket.close();        showToast("Disconnected");        status.setText("Status:Not Connected");        connected = false;    }    public void connect() throws IOException {        if (!connected) {            Set<BluetoothDevice> pairedDevices = mBluetoothAdapter.getBondedDevices();            if (pairedDevices.size() > 0) {                for (BluetoothDevice device : pairedDevices) {                    if (device.getName().equals(deviceName)) {                        mmDevice = device;                        break;                    }                }                UUID uuid = UUID.fromString("00001101-0000-1000-8000-00805f9b34fb"); //Standard SerialPortService ID                mmSocket = mmDevice.createRfcommSocketToServiceRecord(uuid);                mmSocket.connect();                mmOutputStream = mmSocket.getOutputStream();                mmInputStream = mmSocket.getInputStream();                showToast("Connected");                status.setText("Status:Connected");                connected = true;            }        } else {            showToast("Already connected!");        }    }}